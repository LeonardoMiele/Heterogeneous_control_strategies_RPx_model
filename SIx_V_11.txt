import numpy as np
import random
from scipy import stats
import matplotlib.pyplot as plt

# Parameters

I_init=1000               # initialise total I hosts
S_init=1000               # initalise total S hosts
n_iterations=3000         # number of iterations
tau=0.0001                # timestep
b0=0.0001                 # baseline infection rate
b1=0.0001                 # strain-dependent transmission contribution
theta=200                 # replanting/stocking rate
d=0.04                    # harvesting rate
mu_step=0.02              # random mutation step
mu=1                      # mutation rate
c=0.1                     # treatment application rate
nu0=0.08                  # baseline virulence rate
nu1=0.32                  # strain-dependent virulence contribution
phi1=2                    # treatment type, must be -2 <= phi1 <= 2
zeta=0                    # fate parameter (if 0: SIR; if 1: SIS)
            
name_dataset = "type_name_dataset"

name_rates_file = name_dataset + "_rates" + ".txt"
rates = open(name_rates_file, "w")

# compound constants

mu_diff=mu/6*mu_step**2   # mutation diffusion coefficient
phi11=1-phi1/2            # normalisation factor for pesticide type

# Predictions of the deterministic theory

from scipy.optimize import fsolve
import math
from scipy.special import airy, jv, iv
from numpy import sqrt, where
import scipy.integrate as integrate

def Ai(x):
    (ai, ai_prime, bi, bi_prime) = airy(x)
    return ai

def Bi(x):
    (ai, ai_prime, bi, bi_prime) = airy(x)
    return bi

def Aip(x):
    (ai, ai_prime, bi, bi_prime) = airy(x)
    return ai_prime

def Bip(x):
    (ai, ai_prime, bi, bi_prime) = airy(x)
    return bi_prime

def find_avg_vir_positive_Omega(p):
    e=1/3;
    delta0=(b1*(d+nu0)-b0*nu1-b0*c*phi1+b1*c*phi11)/(mu_diff*(b1*p+b0))
    delta=abs(delta0)
    C=-(Aip(p*delta**e)/Bip(p*delta**e))
    C1, C1err =(integrate.quad(lambda z: (Ai((p-z)*delta**(1/3))+C*Bi((p-z)*delta**(1/3))),0,1))
    avg, avgerr = integrate.quad(lambda z: C1**(-1)*(z*(Ai((p-z)*delta**(1/3))+C*Bi((p-z)*delta**(1/3)))),0,1)
    return avg-p

def find_avg_vir_negative_Omega(p):
    e=1/3;
    delta0=(b1*(d+nu0)-b0*nu1-b0*c*phi1+b1*c*phi11)/(mu_diff*(b1*(1-p)+b0))
    delta=abs(delta0)
    C=-(Aip(p*delta**e)/Bip(p*delta**e))
    C1, C1err =(integrate.quad(lambda z: (Ai((p-z)*delta**(1/3))+C*Bi((p-z)*delta**(1/3))),0,1))
    avg, avgerr = integrate.quad(lambda z: C1**(-1)*(z*(Ai((p-z)*delta**(1/3))+C*Bi((p-z)*delta**(1/3)))),0,1)
    return avg-p

Omega = (b1*(d+nu0)-b0*nu1-b0*c*phi1+b1*c*phi11)

# Average strain value at endemic equilibrium

if Omega >=0:
    avg_x = fsolve(find_avg_vir_positive_Omega,1)
else:
    avg_x = 1 - fsolve(find_avg_vir_negative_Omega,1)

# Average virulence, transmission and treatment efficacy at endemic equilibrium

avg_vir=nu0+nu1*avg_x
avg_tra=b0+b1*avg_x
avg_eff=phi11+phi1*avg_x

# Total number of susceptible and infected hosts at equilibrium

Seq= min(theta/d, (d+avg_vir+c*avg_sen)/avg_tra)
Ieq = max(0, (theta - d*Seq)/(d+avg_vir+c*avg_eff*(1-zeta)))

# Print equilibrium state

if Ieq == 0:
    avg_x=0
    print("Disease extinction - Seq = {}".format(theta/d))
else:  
    print("S_eq = {}, I_eq = {}, average_trait = {}, Omega = {}, ".format(Seq,Ieq,avg_x,Omega))

name_parameters_file = name_dataset + "_parameters" + ".txt"
parameters = open(name_parameters_file, "w")
parameters.write("I_init = " + str(I_init) + "\n")
parameters.write("S_init = " + str(S_init) + "\n")
parameters.write("n_iterations = " + str(n_iterations) + "\n")
parameters.write("tau = " + str(tau) + "\n")
parameters.write("b0 = " + str(b0) + "\n")
parameters.write("b1 = " + str(b1) + "\n")
parameters.write("d = " + str(d) + "\n")
parameters.write("mu_step = " + str(mu_step) + "\n")
parameters.write("mu = " + str(mu) + "\n")
parameters.write("theta = " + str(theta) + "\n")
parameters.write("c = " + str(c) + "\n")
parameters.write("nu0 = " + str(nu0) + "\n")
parameters.write("nu1 = " + str(nu1) + "\n")
parameters.write("phi1 = " + str(phi1))
parameters.close()

# Stochastic processes

def Mutation_event(x,y):            # Mutation event
    r1=random.uniform(0,1);
    rate=tau*mu*x.shape[0]
    #rates.write(str(rate) + "|")  
    if r1 <= rate:
        idx=random.randint(0,x.shape[0]-1)
        old_v=x[idx]
        x[idx]+=random.uniform(-mu_step,+mu_step)
        if x[idx] > 1 or x[idx] < 0:
            x[idx]=old_v
    return x, y

def Infection_event(x,y):           # Infection event
    r1=random.uniform(0,1)
    idx=random.randint(0,x.shape[0]-1)
    rate=tau*(b0+b1*x[idx])*x.shape[0]*y
    #rates.write(str(rate) + "|")
    if r1 <= rate:
        y-=1
        x=np.append(x,x[idx])
    return x, y

def Death_I_event(x,y):             # Spontaneous death of I event
    rate=tau*d*x.shape[0]
    r1=random.uniform(0,1)
    #rates.write(str(rate) + "|")  
    if r1 <= rate:
        idx=random.randint(0,x.shape[0]-1)
        x = np.delete(x, idx)
    return x, y

def Virulence_event(x,y):           # Death by virulence event
    r1=random.uniform(0,1)
    idx=random.randint(0,x.shape[0]-1)
    rate=tau*(nu0+nu1*x[idx])*x.shape[0]
    #rates.write(str(rate) + "|")
    if r1 <= rate:
        x = np.delete(x, idx)
    return x, y

def Birth_S_event(x,y):             # Replanting event
    rate=tau*theta
    r1=random.uniform(0,1)
    #rates.write(str(rate) + "|")
    if r1 <= rate:
        y+=1
    return x, y

def Death_S_event(x,y):             # Spontaneous death of s event
    rate=tau*d*y
    r1=random.uniform(0,1)
    #rates.write(str(rate) + "|" + "\n")  
    if r1 <= rate:
        y-=1
    return x, y

def Treatment_event(x,y):
    r1=random.uniform(0,1)
    idx=random.randint(0,x.shape[0]-1)
    rate=tau*c*(1-phi1/2+phi1*x[idx])*x.shape[0]
    if r1 <= rate:
        x = np.delete(x, idx)
        if zeta = 1:
            y+=1
    return x, y   

# Initialise system

I=np.zeros(I_init,dtype=float)
S=S_init
data=np.zeros([n_iterations,3])
datahist=np.zeros([n_iterations,10])
for i in range(I_init):
    I[i]=random.uniform(0,1)

# Agent-based simulation

for i in range(0,n_iterations):
    N_tot=I.shape[0]+S
    #print(i)
    for j in range(0,N_tot):
        I, S = Birth_S_event(I,S)
        I, S = Death_I_event(I,S)
        I, S = Mutation_event(I,S)
        I, S = Infection_event(I,S)
        I, S = Virulence_event(I,S)
        I, S = Death_S_event(I,S)
        I, S = Treatment_event(I,S)


    data[i,0]=I.shape[0]          # Total number of I hosts at time-step i
    data[i,1]=S                   # Total number of S hosts at time-step i
    data[i,2]=np.mean(I)          # Average strain value v at time-step


rates.close

# Plot temporal trajectories

plt.figure(1)
plt.plot(data[:,0],'r')                        # Temporal trajectory I hosts
plt.plot(data[:,1],'b')                        # Temporal trajecotry S hosts
plt.hlines(Ieq,0,n_iterations,'r','--')        # Equilibrium I deterministic theory
plt.hlines(Seq,0,n_iterations,'b','--')        # Equilibrium S deterministic theory
plt.xlabel("timestep")
plt.ylabel("number hosts")
plt.legend(['Infected hosts', 'Susceptible hosts',])

plt.figure(2)
plt.plot(data[:,2],'k')                         # Temporal trajectory average strain value x
plt.hlines(avg_x,0,n_iterations,'k','--')       # Equilibrium average trait x determistic theory
plt.xlabel("timestep")
plt.ylabel("average trait")

# Save data
np.savetxt(name_dataset + ".csv", data, delimiter=",")
data_eq=np.array([Ieq,Seq,avg_x])
np.savetxt(name_dataset + "_eq" + ".csv",data_eq,delimiter=",")